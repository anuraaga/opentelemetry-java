import nebula.plugin.release.git.opinion.Strategies
import ru.vyarus.gradle.plugin.animalsniffer.AnimalSniffer

plugins {
    id "com.diffplug.spotless"
    id "com.github.ben-manes.versions"
    id "com.jfrog.artifactory" apply false
    id "com.jfrog.bintray" apply false
    id "nebula.release"
    id "net.ltgt.errorprone" apply false
    id "ru.vyarus.animalsniffer" apply false
    id "io.morethan.jmhreport" apply false
}

if (!JavaVersion.current().isJava11Compatible()) {
    throw new GradleException("JDK 11 or higher is required to build. " +
            "One option is to download it from https://adoptopenjdk.net/. If you believe you already " +
            "have it, please check that the JAVA_HOME environment variable is pointing at the " +
            "JDK 11 installation.")
}

// Nebula plugin will not configure if .git doesn't exist, let's allow building on it by stubbing it
// out. This supports building from the zip archive downloaded from GitHub.
def releaseTask
if (file('.git').exists()) {
    release {
        defaultVersionStrategy = Strategies.getSNAPSHOT()
    }

    nebulaRelease {
        addReleaseBranchPattern(/v\d+\.\d+\.x/)
    }

    releaseTask = tasks.named("release")
    releaseTask.configure {
        mustRunAfter("snapshotSetup", "finalSetup")
    }
} else {
    releaseTask = tasks.register('release')
}

subprojects {
    group = "io.opentelemetry"

    plugins.withId("java") {
        plugins.apply('checkstyle')
        plugins.apply('eclipse')
        plugins.apply('idea')
        plugins.apply('jacoco')

        plugins.apply('com.diffplug.spotless')
        plugins.apply('net.ltgt.errorprone')

        archivesBaseName = "opentelemetry-${project.name}"

        repositories {
            mavenCentral()
            jcenter()
            mavenLocal()
        }

        java {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8

            toolchain {
                languageVersion = JavaLanguageVersion.of(11)
            }

            withJavadocJar()
            withSourcesJar()
        }

        javadoc {
            exclude 'io/opentelemetry/internal/**'
        }

        def testJava8 = tasks.register('testJava8', Test) {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(8)
            }

            jacoco.enabled = false
        }
        if (rootProject.findProperty('testAdditionalJavaVersions') == 'true') {
            tasks.named("check").configure {
                dependsOn(testJava8)
            }
        }

        tasks.withType(JavaCompile) {
            it.options.release = 8

            it.options.compilerArgs += [
                    "-Xlint:all",
                    // We suppress the "try" warning because it disallows managing an auto-closeable with
                    // try-with-resources without referencing the auto-closeable within the try block.
                    "-Xlint:-try",
                    // We suppress the "processing" warning as suggested in
                    // https://groups.google.com/forum/#!topic/bazel-discuss/_R3A9TJSoPM
                    "-Xlint:-processing",
                    // We suppress the "options" warning because it prevents compilation on modern JDKs
                    "-Xlint:-options",
            ]
            it.options.errorprone.disableWarningsInGeneratedCode = true
            it.options.errorprone.allDisabledChecksAsWarnings = true

            // Doesn't currently use Var annotations.
            it.options.errorprone.disable("Var") // "-Xep:Var:OFF"

            // ImmutableRefactoring suggests using com.google.errorprone.annotations.Immutable,
            // but currently uses javax.annotation.concurrent.Immutable
            it.options.errorprone.disable("ImmutableRefactoring") // "-Xep:ImmutableRefactoring:OFF"


            // AutoValueImmutableFields suggests returning Guava types from API methods
            it.options.errorprone.disable("AutoValueImmutableFields")
            // "-Xep:AutoValueImmutableFields:OFF"

            // Fully qualified names may be necessary when deprecating a class to avoid
            // deprecation warning.
            it.options.errorprone.disable("UnnecessarilyFullyQualified")

            it.options.encoding = "UTF-8"

            // Ignore warnings for protobuf and jmh generated files.
            it.options.errorprone.excludedPaths = ".*generated.*"
            // "-XepExcludedPaths:.*/build/generated/source/proto/.*"

            it.options.errorprone.disable("Java7ApiChecker")
            it.options.errorprone.disable("AndroidJdkLibsChecker")
            //apparently disabling android doesn't disable this
            it.options.errorprone.disable("StaticOrDefaultInterfaceMethod")

            //until we have everything converted, we need these
            it.options.errorprone.disable("JdkObsolete")
            it.options.errorprone.disable("UnnecessaryAnonymousClass")

            // Limits APIs
            it.options.errorprone.disable("NoFunctionalReturnType")

            it.options.compilerArgs += ["-Werror"]
        }

        compileTestJava {
            // serialVersionUID is basically guaranteed to be useless in tests
            options.compilerArgs += ["-Xlint:-serial"]
        }

        afterEvaluate {
            jar.manifest {
                attributes('Implementation-Title': archivesBaseName,
                        'Implementation-Version': version,
                        'Built-By': System.getProperty('user.name'),
                        'Built-JDK': System.getProperty('java.version'),
                        'Source-Compatibility': sourceCompatibility,
                        'Target-Compatibility': targetCompatibility)
            }
        }

        checkstyle {
            configDirectory = file("$rootDir/buildscripts/")
            toolVersion = "8.12"
            ignoreFailures = false
            configProperties["rootDir"] = rootDir
        }

        jacoco { toolVersion = "0.8.6" }

        // https://docs.gradle.org/current/samples/sample_jvm_multi_project_with_code_coverage.html

        // Do not generate reports for individual projects
        tasks.named('jacocoTestReport') {
            enabled = false
        }

        configurations {
            transitiveSourceElements {
                visible = false
                canBeResolved = false
                canBeConsumed = true
                extendsFrom(configurations.implementation)
                attributes {
                    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
                    attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
                    attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
                }
                sourceSets.main.java.srcDirs.forEach {
                    outgoing.artifact(it)
                }
            }

            coverageDataElements {
                visible = false
                canBeResolved = false
                canBeConsumed = true
                extendsFrom(configurations.implementation)
                attributes {
                    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
                    attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
                    attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
                }
                // This will cause the test task to run if the coverage data is requested by the aggregation task
                outgoing.artifact(tasks.named("test").map { task ->
                    task.extensions.getByType(JacocoTaskExtension).destinationFile
                })
            }
        }

        spotless {
            java {
                googleJavaFormat("1.9")
                licenseHeaderFile rootProject.file('buildscripts/spotless.license.java'), '(package|import|class|// Includes work from:)'
            }
        }

        configurations {
            compile {
                // Detect Maven Enforcer's dependencyConvergence failures. We only
                // care for artifacts used as libraries by others.
                // TODO: Enable failOnVersionConflict()
                resolutionStrategy.preferProjectModules()
            }
        }

        dependencies {
            configurations.all {
                // Gradle and newer plugins will set these configuration properties correctly.
                if (it.canBeResolved && !it.canBeConsumed
                        // Older ones (like JMH) may not, so check the name as well.
                        // Kotlin compiler classpaths don't support BOM nor need it.
                        || it.name.endsWith('Classpath') && !it.name.startsWith('kotlin'))
                    add(it.name, platform(project(':dependencyManagement')))
            }

            compileOnly "com.google.auto.value:auto-value-annotations",
                    "com.google.errorprone:error_prone_annotations",
                    "com.google.code.findbugs:jsr305"

            testCompileOnly "com.google.auto.value:auto-value-annotations",
                    "com.google.errorprone:error_prone_annotations",
                    "com.google.code.findbugs:jsr305"

            testImplementation "org.junit.jupiter:junit-jupiter-api",
                    "nl.jqno.equalsverifier:equalsverifier",
                    "org.mockito:mockito-core",
                    "org.mockito:mockito-junit-jupiter",
                    "org.assertj:assertj-core",
                    "org.awaitility:awaitility",
                    "io.github.netmikey.logunit:logunit-jul"

            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine",
                    "org.junit.vintage:junit-vintage-engine"

            // The ErrorProne plugin defaults to the latest, which would break our
            // build if error prone releases a new version with a new check
            errorprone "com.google.errorprone:error_prone_core"

            annotationProcessor "com.google.guava:guava-beta-checker"

            // Workaround for @javax.annotation.Generated
            // see: https://github.com/grpc/grpc-java/issues/3633
            compileOnly "javax.annotation:javax.annotation-api"
        }

        tasks.withType(Test) {
            useJUnitPlatform()

            // At a test failure, log the stack trace to the console so that we don't
            // have to open the HTML in a browser.
            testLogging {
                exceptionFormat = 'full'
                showExceptions = true
                showCauses = true
                showStackTraces = true
            }
            maxHeapSize = '1500m'
        }

        javadoc.options {
            source = "8"
            encoding = "UTF-8"
            links 'https://docs.oracle.com/javase/8/docs/api/'
            addBooleanOption('Xdoclint:all,-missing', true)
        }

        afterEvaluate {
            jar {
                inputs.property("moduleName", moduleName)

                manifest {
                    attributes('Automatic-Module-Name': moduleName)
                }
            }
        }

        plugins.withId("com.google.protobuf") {
            afterEvaluate {
                protobuf {
                    protoc {
                        // The artifact spec for the Protobuf Compiler
                        artifact = "com.google.protobuf:protoc:${versions["com.google.protobuf"]}"
                    }
                    plugins {
                        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${versions["io.grpc"]}" }
                    }
                    generateProtoTasks {
                        all()*.plugins { grpc {} }
                    }
                }
            }
        }

        plugins.withId("ru.vyarus.animalsniffer") {
            dependencies {
                signature "com.toasttab.android:gummy-bears-api-24:0.3.0:coreLib@signature"
            }

            tasks.withType(AnimalSniffer) {
                if (name.startsWith('animalsnifferTest')) {
                    enabled = false
                }
            }
            // If JMH enabled ignore animalsniffer.
            plugins.withId("me.champeau.gradle.jmh") {
                animalsnifferJmh {
                    enabled = false
                }
            }
        }

        plugins.withId("me.champeau.gradle.jmh") {
            // Always include the jmhreport plugin and run it after jmh task.
            plugins.apply "io.morethan.jmhreport"
            dependencies {
                jmh "org.openjdk.jmh:jmh-core",
                        "org.openjdk.jmh:jmh-generator-bytecode"
            }

            // invoke jmh on a single benchmark class like so:
            //   ./gradlew -PjmhIncludeSingleClass=StatsTraceContextBenchmark clean :grpc-core:jmh
            jmh {
                failOnError = true
                resultFormat = 'JSON'
                // Otherwise an error will happen:
                // Could not expand ZIP 'byte-buddy-agent-1.9.7.jar'.
                includeTests = false
                profilers = ["gc"]
                if (project.hasProperty('jmhIncludeSingleClass')) {
                    include = [
                            project.property('jmhIncludeSingleClass')
                    ]
                }
            }

            jmhReport {
                jmhResultPath = project.file("${project.buildDir}/reports/jmh/results.json")
                jmhReportOutput = project.file("${project.buildDir}/reports/jmh")
            }

            // Always run jmhReport after jmh task.
            tasks.jmh.finalizedBy tasks.jmhReport
        }
    }

   plugins.withId("maven-publish") {
        plugins.apply('signing')

        // Always include the artifactory/bintray plugins to do the deployment.
        plugins.apply("com.jfrog.artifactory")
        plugins.apply("com.jfrog.bintray")

        releaseTask.configure {
            if (version.toString().endsWith('-SNAPSHOT')) {
                finalizedBy(tasks.named('artifactoryPublish'))
            } else {
                finalizedBy(tasks.named('bintrayUpload'))
            }
        }

        publishing {
            publications {
                mavenPublication(MavenPublication) {
                    def release = project.findProperty("otel.release")
                    if (release != null) {
                        version "${version}".replaceFirst(/^(\d+)\.(\d+).(\d+)/) { _, major, minor, patch ->
                            "${major}.${minor}.${patch}-${release}"
                        }
                    }
                    groupId "io.opentelemetry"
                    afterEvaluate {
                        artifactId = archivesBaseName
                    }

                    plugins.withId("java-platform") {
                        from(components["javaPlatform"])
                    }
                    plugins.withId("java-library") {
                        from(components["java"])
                    }

                    versionMapping {
                        allVariants {
                            fromResolutionResult()
                        }
                    }

                    pom {
                        name = 'OpenTelemetry Java'
                        url = 'https://github.com/open-telemetry/opentelemetry-java'

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id = 'opentelemetry'
                                name = 'OpenTelemetry Gitter'
                                url = 'https://gitter.im/open-telemetry/community'
                            }
                        }

                        scm {
                            connection = 'scm:git:git@github.com:open-telemetry/opentelemetry-java.git'
                            developerConnection = 'scm:git:git@github.com:open-telemetry/opentelemetry-java.git'
                            url = 'git@github.com:open-telemetry/opentelemetry-java.git'
                        }

                        afterEvaluate {
                            // description is not available until evaluated.
                            description = project.description
                        }
                    }
                }
            }
        }

        signing {
            required false
            sign configurations.archives
        }

        // Snapshot publishing.
        artifactory {
            contextUrl = 'https://oss.jfrog.org'
            publish {
                repository {
                    repoKey = 'oss-snapshot-local'
                    username = System.getenv("BINTRAY_USER")
                    password = System.getenv("BINTRAY_KEY")
                }
                defaults {
                    publications('mavenPublication')
                    publishArtifacts = true
                    publishPom = true
                }
            }
            resolve {
                repoKey = 'libs-release'
            }
        }

        artifactoryPublish {
            enabled = version.toString().endsWith('-SNAPSHOT')
        }

        // Release artifacts publishing.
        bintray {
            user = System.getenv("BINTRAY_USER")
            key = System.getenv("BINTRAY_KEY")
            publications = ['mavenPublication']

            publish = true

            pkg {
                repo = 'maven'
                name = 'opentelemetry-java'
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/open-telemetry/opentelemetry-java.git'
                userOrg = 'open-telemetry'

                githubRepo = 'open-telemetry/opentelemetry-java'

                version {
                    name = project.version

                    gpg {
                        sign = true
                    }

                    mavenCentralSync {
                        user = System.getenv("SONATYPE_USER")
                        password = System.getenv("SONATYPE_KEY")
                    }
                }
            }
        }
    }
}

allprojects {
    tasks.register("updateVersionInDocs") {
        group("documentation")
        doLast {
            def versionParts = version.toString().split('\\.')
            def minorVersionNumber = Integer.parseInt(versionParts[1])
            def nextSnapshot = "${versionParts[0]}.${minorVersionNumber + 1}.0-SNAPSHOT"

            def readme = file("README.md")
            if (!readme.exists()) return

            def readmeText = readme.text
            def updatedText = readmeText
                    .replaceAll("<version>\\d+\\.\\d+\\.\\d+</version>", "<version>${version}</version>")
                    .replaceAll("<version>\\d+\\.\\d+\\.\\d+-SNAPSHOT</version>", "<version>${nextSnapshot}</version>")
                    .replaceAll("(implementation.*io\\.opentelemetry:.*:)(\\d+\\.\\d+\\.\\d+)(?!-SNAPSHOT)(.*)", "\$1${version}\$3")
                    .replaceAll("(implementation.*io\\.opentelemetry:.*:)(\\d+\\.\\d+\\.\\d+-SNAPSHOT)(.*)", "\$1${nextSnapshot}\$3")
                    .replaceAll("<!--VERSION_STABLE-->.*<!--/VERSION_STABLE-->", "<!--VERSION_STABLE-->${version}<!--/VERSION_STABLE-->")
                    .replaceAll("<!--VERSION_UNSTABLE-->.*<!--/VERSION_UNSTABLE-->", "<!--VERSION_UNSTABLE-->${version}-alpha<!--/VERSION_UNSTABLE-->")
            readme.text = updatedText
        }
    }
}
